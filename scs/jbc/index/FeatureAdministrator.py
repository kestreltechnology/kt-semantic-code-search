# ------------------------------------------------------------------------------
# Python API to access CodeHawk Java Analyzer analysis results
# Author: Henny Sipma
# ------------------------------------------------------------------------------
# The MIT License (MIT)
#
# Copyright (c) 2016-2018 Kestrel Technology LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ------------------------------------------------------------------------------

import scs.jbc.util.fileutil as UF

"""
Controls the inclusion and retrieval of pre-features as generated by CodeHawk.

It maintains the following mappings in the docindex directory of the features
directory:
- jarmanifest.json       : jarmd5ix -> pckix -> classmd5ix list
- jarmd5s.json           : jarmd5 -> jarmd5ix
- packageindex.json      : package name -> pckix
- classmd5s.json         : classmd5 -> classmd5ix
- classnames.json        : class name -> cnix
- classmd5xref.json      : classmd5ix -> (pckix, cnix)
"""

class FeaturesAdministrator():

    def __init__(self,featurespath):
        self.featurespath = featurespath
        self.jarmanifest = JarManifest(featurespath)
        self.jarmd5index = JarMd5Index(featurespath)
        self.packageindex = PackageIndex(featurespath)
        self.classmd5index = ClassMd5Index(featurespath)
        self.classnameindex = ClassNameIndex(featurespath)
        self.classmd5xref = ClassMd5Xref(featurespath)

    """Incorporates features from the classfiles in featurespath into an index
    The index may be a new index or an existing index, in which case the features
    are integrated with the existing features.

    indexadmin: index administrator
    qualifier: predicate that determines if a class is to be included in the index
    """
    def index_features(self,indexadmin,qualifier):
        excluded = []
        for fjmd5ix in self.jarmanifest.xref:
            jmd5 = self.jarmd5index.get_jmd5(fjmd5ix)
            if indexadmin.has_jar(jmd5):
                continue
            jarfiles = self.jarmanifest.get_files(fjmd5ix)
            # add jar to the index
            ijmd5ix = indexadmin.jarmd5index.add_jmd5(jmd5)
            indexadmin.jarnames.add_jar(jmd5ix,jarfiles)

            for fpckix in self.jarmanifest.get_pckixs(fjmd5ix):
                for fcmd5ix in self.jarmanifest.get_cmd5ixs(fjmd5ix,fpckix):
                    cmd5 = self.classmd5index.get_cmd5(fcmd5ix)
                    xclass = UF.load_features_file(self.featurespath,cmd5)
                    if qualifier(xclass):
                        # add class to the index
                        icmd5ix = indexadmin.classmd5index.add_cmd5(cmd5)
                        indexadmin.jmd5xref.add_xref(ijmd5,icmd5ix)
                        indexadmin.add_class_features(ClassFeatures(xclass),ijmd5ix)
                    else:
                        excluded.append((xclass.get('package'),xclass.get('name'),cmd5))
        indexadmin_savefeatures()
        return excluded
                        
            
